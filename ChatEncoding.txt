Script("Name") = "Chat Encoding"
Script("Author") = "Pyro"
Script("Major") = 0
Script("Minor") = 3
Script("Description") = "Allows sending and receiving messages in various encoded formats."


Const EVENT_PROCESSOR_SCRIPT = "Chat Event Pre-Processor"

Public AvailableEncodings

Private SetupCompleted

Sub Event_Load()
    SetupCompleted = False
    
    If Scripts(EVENT_PROCESSOR_SCRIPT) Is Nothing Then
        AddChat Color.Red, "[ENC] Error: The script '" & EVENT_PROCESSOR_SCRIPT & "' could not be found."
        Exit Sub
    End If
    
    Set AvailableEncodings = CreateObject("Scripting.Dictionary")
    With AvailableEncodings
        .Add "HEX", New HexEncoding
        .Add "ROT13", New Rot13Encoding
        .Add "ROT47", New Rot47Encoding
        .Add "INVIG", New InvigorationEncoding
        .Add "BASE64", New Base64Encoding
    End With
End Sub

Sub Event_Close()
    If Scripts(EVENT_PROCESSOR_SCRIPT) Is Nothing Then Exit Sub
    
    Call Scripts(EVENT_PROCESSOR_SCRIPT).Unregister(Script("Name"))
    
    Set AvailableEncodings = Nothing
End Sub

Public Sub Event_PacketReceived(Protocol, ID, Length, Data)
    If Not SetupCompleted Then
        Call Setup()
    End If
End Sub

Public Sub Event_ChatEventReceived(EventID, Flags, Ping, IP, Account, RegAuth, Username, Message)
    If EventID <> &H5 Then Exit Sub
    If Len(Message) < 2 Then Exit Sub
    
    IsEncoded = False
    For Each Encoding In AvailableEncodings.Items()
        If Left(Message, 1) = Encoding.MessageIndicator Then
            DecodedMessage = Encoding.Decode(Mid(Message, 2))
            
            If Len(DecodedMessage) > 0 Then
                VetoThisMEssage
                AddChat Color.Red, "[ENC-" & Encoding.ShortID & "] ", Color.Carats, "<", Color.TalkUsernameNormal, Username, Color.Carats, "> ", Color.TalkNormalText, DecodedMessage
            End If
        End If
    Next
End Sub


Public Sub Send(ID, Message)
    If Not AvailableEncodings.Exists(ID) Then Exit Sub
    
    Set Encoding = AvailableEncodings(ID)
	AddQ Encoding.MessageIndicator & Encoding.Encode(Message)
End Sub

Public Sub TestEncoding(ID, Message)
    If Not AvailableEncodings.Exists(ID) Then Exit Sub
    
    Set Encoding = AvailableEncodings(ID)
    AddChat Color.Red, "[ENC-" & Encoding.ShortID & "] ", Color.Orange, "Input: " & Message
    
    EncodedMessage = Encoding.Encode(Message)
    AddChat Color.Red, "[ENC-" & Encoding.ShortID & "] ", Color.Orange, "Encoded: " & EncodedMessage
    
    Output = Encoding.Decode(EncodedMessage)
    AddChat Color.Red, "[ENC-" & Encoding.ShortID & "] ", Color.Orange, "Output: " & Output
    
    IsMatch = CBool(Message = Output)
    AddChat Color.Red, "[ENC-" & Encoding.ShortID & "] ", IIf(IsMatch, Color.Green, Color.Yellow), "Success: " & CStr(IsMatch)
End Sub

Function PadLeft(str, c, i)
	PadLeft = Right(String(i, c) & str, i)
End Function

Sub Setup()
    If SetupCompleted = True Then Exit Sub
    
    If Scripts(EVENT_PROCESSOR_SCRIPT) Is Nothing Then Exit Sub
    Call Scripts(EVENT_PROCESSOR_SCRIPT).Register(Script("Name"))
    SetupCompleted = True
End Sub


Class HexEncoding
    Public ShortID
    Public MessageIndicator
    
    Public Sub Class_Initialize()
        ShortID = "HEX"
        MessageIndicator = Chr(&HA3)
    End Sub
    
    Public Function Encode(Text)
        Encode = vbNullString
        For i = 1 To Len(Text)
            Encode = Encode & LCase(PadLeft(CStr(Hex(Asc(Mid(Text, i, 1)))), "0", 2))
        Next
    End Function
    
    Public Function Decode(Text)
        Text = Replace(Text, Space(1), vbNullString)
        
        Decode = vbNullString
        For i = 1 To Len(Text) Step 2
            Decode = Decode & Chr("&H" & Mid(Text, i, 2))
        Next
    End Function
End Class

Class Rot13Encoding
    Public ShortID
    Public MessageIndicator
    
    Public Sub Class_Initialize()
        ShortID = "ROT13"
        MessageIndicator = Chr(&HA5)
    End Sub
    
    Public Function Encode(Text)
        Encode = vbNullString
        For i = 1 To Len(Text)
            val = Asc(Mid(Text, i, 1))
            If ((val > 64 And val < 78) Or (val > 96 And val < 110)) Then Encode = Encode & Chr(val + 13)
            If ((val > 77 And val < 90) Or (val > 108 And val < 123)) Then Encode = Encode & Chr(val - 13)
        Next
    End Function
    
    Public Function Decode(Text)
        Decode = Encode(Text)
    End Function
End Class

Class Rot47Encoding
    Public ShortID
    Public MessageIndicator
    
    Public Sub Class_Initialize()
        ShortID = "ROT47"
        MessageIndicator = Chr(&HA6)
    End Sub
    
    Public Function Encode(Text)
        Encode = vbNullString
        For i = 1 To Len(Text)
            val = Asc(Mid(Text, i, 1))
            If val >= 33 And k <= 126 Then
                Encode = Encode & Chr(33 + ((val + 14) Mod 94))
            Else
                Encode = Encode & Chr(val)
            End If
        Next
    End Function
    
    Public Function Decode(Text)
        Decode = Encode(Text)
    End Function
End Class

Class InvigorationEncoding
    Public ShortID
    Public MessageIndicator
    
    Public Sub Class_Initialize()
        ShortID = "INVIG"
        MessageIndicator = Chr(&H95)
    End Sub
    
    Public Function Encode(Text)
        Combine = vbNullString
	
        For i = 1 To Len(Text)
            Combine = Combine & PadLeft(CStr(Asc(Mid(Text, i, 1))), "0", 3)
        Next
	
        Encode = vbNullString
        For i = 1 To Len(Combine)
            Encode = Encode & Chr(Asc(Mid(Combine, i, 1)) + 101)
        Next
    End Function
    
    Public Function Decode(Text)
    	Combine = vbNullString
	
        For i = 1 To Len(Text)
            Combine = Combine & Chr(Asc(Mid(Text, i, 1)) - 101)
        Next
	
        Decode = vbNullString
        For i = 1 To Len(Combine) Step 3
            Decode = Decode & Chr(Mid(Combine, i, 3))
        Next
    End Function
End Class

Class Base64Encoding
    Public ShortID
    Public MessageIndicator
    
    Private B64
    
    Public Sub Class_Initialize()
        ShortID = "BASE64"
        MessageIndicator = Chr(&HE6)
        
        B64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"  
    End Sub
    
    Public Function Encode(Text)
        For i = 1 To Len(Text) Step 3
            group = &H10000 * Asc(Mid(Text, i, 1)) + &H100 * SafeAsc(Mid(Text, i + 1, 1)) + SafeAsc(Mid(Text, i + 2, 1))
            group = Oct(group)
            group = String(8 - Len(group), "0") & group
            
            out = Mid(B64, CLng("&o" & Mid(group, 1, 2)) + 1, 1) + _
                  Mid(B64, CLng("&o" & Mid(group, 3, 2)) + 1, 1) + _
                  Mid(B64, CLng("&o" & Mid(group, 5, 2)) + 1, 1) + _
                  Mid(B64, CLng("&o" & Mid(group, 7, 2)) + 1, 1)
                  
            Encode = Encode & out
        Next
        
        Select Case Len(Text) Mod 3
            Case 1: Encode = Left(Encode, Len(Encode) - 2) + "=="
            Case 2: Encode = Left(Encode, Len(Encode) - 1) + "="
        End Select
    End Function
    
    Public Function Decode(Text)
        Text = Replace(Text, " ", "")
        
        If length Mod 4 <> 0 Then
            AddChat Color.Red, "[ENC-" & ShortID & "] Invalid base64 string: ", Color.Orange, Text
            Exit Function
        End If
        
        For i = 1 To Len(Text) Step 4
            numBytes = 3
            group = 0
            
            For cnt = 0 To 3
                c = Mid(Text, i + cnt, 1)
                
                If c = "=" Then
                    numBytes = numBytes - 1
                    d = 0
                Else
                    d = InStr(1, B64, c, vbBinaryCompare) - 1
                End If
                
                If d = -1 Then
                    AddChat Color.Red, "[ENC-" & ShortID & "] Invalid character in base64 string: ", Color.Orange, c
                    Exit Function
                End If
                
                group = 64 * group + d
            Next
            
            group = Hex(group)
            group = String(6 - Len(group), "0") & group
            
            out = Chr(CByte("&H" & Mid(group, 1, 2))) + _
                  Chr(CByte("&H" & Mid(group, 3, 2))) + _
                  Chr(CByte("&H" & Mid(group, 5, 2)))
                  
            Decode = Decode & Left(out, numBytes)
        Next
    End Function
    
    Private Function SafeAsc(c)
        If c = "" Then SafeAsc = 0 Else SafeAsc = Asc(c)
    End Function
End Class